import { Injectable } from '@angular/core';
import { LocalNotifications, PermissionStatus, ScheduleOptions, SettingsPermissionStatus } from '@capacitor/local-notifications';
import { Platform } from '@ionic/angular';

interface NotificationData {
  id: string;
  title: string;
  body: string;
  date: string;
  time: string;
}

@Injectable({
  providedIn: 'root'
})
export class NotificationService {
  constructor(private platform: Platform) {
    this.initializeNotifications();
    
    // Adicionar chamada de debug ap√≥s um curto delay
    setTimeout(() => {
      this.debugNotificationSystem();
    }, 3000);
  }

  private async initializeNotifications() {
    try {
      if (this.platform.is('capacitor')) {
        // Inicializa√ß√£o para Android
        await this.createNotificationChannel();
        const permissionStatus = await LocalNotifications.checkPermissions();
        console.log('Status de permiss√£o inicial (Android):', permissionStatus);

        if (permissionStatus.display !== 'granted') {
          console.log('Solicitando permiss√£o de notifica√ß√£o (Android)');
          const requestResult = await LocalNotifications.requestPermissions();
          console.log('Resultado da solicita√ß√£o de permiss√£o:', requestResult);
        }

        if (this.platform.is('android')) {
          const exactAlarmStatus = await this.checkExactAlarmSetting();
          console.log('Status de alarme exato:', exactAlarmStatus);
        }
      } else {
        // Inicializa√ß√£o para Web
        if ('Notification' in window) {
          const permission = await Notification.requestPermission();
          console.log('Status de permiss√£o inicial (Web):', permission);
        } else {
          console.warn('Notifica√ß√µes Web n√£o s√£o suportadas neste navegador');
        }
      }
    } catch (error) {
      console.error('Erro ao inicializar notifica√ß√µes:', error);
    }
  }

  private async checkExactAlarmSetting(): Promise<SettingsPermissionStatus> {
    try {
      const exactAlarmStatus = await LocalNotifications.checkExactNotificationSetting();
      
      if (exactAlarmStatus.exact_alarm !== 'granted') {
        console.warn('Configura√ß√£o de alarme exato n√£o concedida');
        // Opcional: Redirecionar para configura√ß√µes
        // await LocalNotifications.changeExactNotificationSetting();
      }

      return exactAlarmStatus;
    } catch (error) {
      console.error('Erro ao verificar configura√ß√£o de alarme exato:', error);
      return { exact_alarm: 'denied' };
    }
  }

  private async createNotificationChannel() {
    try {
      await LocalNotifications.createChannel({
        id: 'bill_reminders',
        name: 'Lembretes de Contas',
        description: 'Notifica√ß√µes de vencimento de contas',
        importance: 4, // IMPORTANCE_HIGH
        visibility: 1, // VISIBILITY_PUBLIC
        sound: 'default',
        lights: true,
        lightColor: '#FF0000',
        vibration: true
      });
      console.log('Canal de notifica√ß√£o criado com sucesso');
    } catch (error) {
      console.error('Erro ao criar canal de notifica√ß√£o:', error);
    }
  }

  async scheduleNotification(data: NotificationData) {
    try {
      console.log('üîî Iniciando agendamento de notifica√ß√£o:', data);

      if (this.platform.is('capacitor')) {
        // Verificar permiss√£o de notifica√ß√£o
        const permissionStatus = await LocalNotifications.checkPermissions();
        console.log('üîç Status de permiss√£o:', permissionStatus);
        
        if (permissionStatus.display !== 'granted') {
          console.warn('‚ùå Permiss√£o de notifica√ß√£o n√£o concedida');
          const requestResult = await LocalNotifications.requestPermissions();
          console.log('üìã Resultado da solicita√ß√£o de permiss√£o:', requestResult);
        }

        // Criar data de notifica√ß√£o
        const notificationDateTime = new Date(data.date);
        const [hours, minutes] = data.time.split(':');
        notificationDateTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);

        console.log('üìÖ Data e hora da notifica√ß√£o:', notificationDateTime);

        // Verificar se a data √© futura
        if (notificationDateTime <= new Date()) {
          console.warn('‚ùó Data de notifica√ß√£o no passado:', notificationDateTime);
          return;
        }

        // Configura√ß√µes espec√≠ficas para Android
        let notificationId = parseInt(data.id);
        let allowWhileIdle = false;

        // Verifica√ß√µes espec√≠ficas para Android
        if (this.platform.is('android')) {
          try {
            const exactAlarmStatus = await this.checkExactAlarmSetting();
            console.log('‚è∞ Status de alarme exato:', exactAlarmStatus);
            
            if (exactAlarmStatus.exact_alarm !== 'granted') {
              console.warn('‚ö†Ô∏è Configura√ß√£o de alarme exato n√£o concedida');
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è Erro ao verificar alarme exato:', error);
          }

          // Gerar ID seguro apenas para Android
          notificationId = this.generateSafeNotificationId(data.id.split('_')[1]);
          allowWhileIdle = true; // Habilita apenas para Android
        }

        // Configura√ß√µes de agendamento
        const scheduleOptions: ScheduleOptions = {
          notifications: [
            {
              id: notificationId,
              title: data.title,
              body: data.body,
              schedule: { 
                at: notificationDateTime,
                allowWhileIdle, // Usa a configura√ß√£o baseada na plataforma
                repeats: false
              },
              channelId: 'bill_reminders',
              sound: 'default',
              attachments: [],
              actionTypeId: '',
              extra: {
                billId: data.id
              }
            }
          ]
        };

        console.log('üöÄ Op√ß√µes de agendamento:', scheduleOptions);

        // Agendar notifica√ß√£o
        const result = await LocalNotifications.schedule(scheduleOptions);
        console.log('‚úÖ Notifica√ß√£o agendada:', result);

      } else {
        // L√≥gica para Web Notifications
        if ('Notification' in window) {
          const permission = await Notification.requestPermission();
          
          if (permission === 'granted') {
            const notificationDateTime = new Date(data.date);
            const [hours, minutes] = data.time.split(':');
            notificationDateTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);

            const now = new Date();
            const timeUntilNotification = notificationDateTime.getTime() - now.getTime();

            if (timeUntilNotification > 0) {
              setTimeout(() => {
                const notification = new Notification(data.title, {
                  body: data.body,
                  icon: '/assets/icon/favicon.png',
                  badge: '/assets/icon/favicon.png',
                  tag: data.id
                });

                notification.onclick = () => {
                  window.focus();
                  notification.close();
                };
              }, timeUntilNotification);

              console.log('‚úÖ Notifica√ß√£o web agendada para:', notificationDateTime);
            } else {
              console.warn('‚ùó Data de notifica√ß√£o web no passado:', notificationDateTime);
            }
          } else {
            console.warn('‚ùå Permiss√£o de notifica√ß√£o web n√£o concedida');
          }
        } else {
          console.warn('‚ùå Notifica√ß√µes Web n√£o s√£o suportadas neste navegador');
        }
      }
    } catch (error) {
      console.error('‚ùå Erro detalhado ao agendar notifica√ß√£o:', error);
      throw new Error('N√£o foi poss√≠vel agendar a notifica√ß√£o');
    }
  }

  // M√©todo auxiliar para gerar ID seguro para notifica√ß√£o no Android
  private generateSafeNotificationId(inputId: string): number {
    const MAX_INT = 2147483647;
    let numericId = parseInt(inputId);
    if (isNaN(numericId)) {
      numericId = Date.now();
    }
    return Math.abs(numericId % MAX_INT);
  }

  async cancelNotification(id: string) {
    try {
      await LocalNotifications.cancel({
        notifications: [{ id: parseInt(id) }]
      });
      console.log(`Notifica√ß√£o ${id} cancelada`);
    } catch (error) {
      console.error('Erro ao cancelar notifica√ß√£o:', error);
      throw new Error('N√£o foi poss√≠vel cancelar a notifica√ß√£o');
    }
  }

  async cancelAllNotifications() {
    try {
      // Primeiro, buscar todas as notifica√ß√µes pendentes
      const pendingNotifications = await LocalNotifications.getPending();
      
      if (pendingNotifications.notifications.length > 0) {
        // Cancelar todas as notifica√ß√µes pendentes
        await LocalNotifications.cancel({
          notifications: pendingNotifications.notifications
        });
        console.log(`Todas as ${pendingNotifications.notifications.length} notifica√ß√µes canceladas`);
      } else {
        console.log('N√£o h√° notifica√ß√µes pendentes para cancelar');
      }
    } catch (error) {
      console.error('Erro ao cancelar todas as notifica√ß√µes:', error);
    }
  }

  async getPendingNotifications() {
    try {
      const pendingNotifications = await LocalNotifications.getPending();
      console.log('Notifica√ß√µes pendentes:', pendingNotifications);
      return pendingNotifications;
    } catch (error) {
      console.error('Erro ao buscar notifica√ß√µes pendentes:', error);
      return { notifications: [] };
    }
  }

  async debugNotificationSystem() {
    try {
      // Verificar permiss√µes detalhadamente
      const permissionStatus = await LocalNotifications.checkPermissions();
      console.log('üîç Status de Permiss√µes de Notifica√ß√£o:', permissionStatus);

      // Verificar configura√ß√µes de alarme exato
      const exactAlarmStatus = await this.checkExactAlarmSetting();
      console.log('üï∞Ô∏è Status de Alarme Exato:', exactAlarmStatus);

      // Verificar notifica√ß√µes pendentes
      const pendingNotifications = await this.getPendingNotifications();
      console.log('üìÖ Notifica√ß√µes Pendentes:', pendingNotifications);

      // Testar agendamento de uma notifica√ß√£o de teste
      const testNotification: NotificationData = {
        id: '9999',
        title: 'Teste de Notifica√ß√£o',
        body: 'Esta √© uma notifica√ß√£o de teste para verificar o sistema',
        date: new Date(Date.now() + 60000).toISOString(), // 1 minuto no futuro
        time: new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })
      };

      console.log('üß™ Tentando agendar notifica√ß√£o de teste:', testNotification);
      await this.scheduleNotification(testNotification);

    } catch (error) {
      console.error('‚ùå Erro no diagn√≥stico do sistema de notifica√ß√µes:', error);
    }
  }
}
